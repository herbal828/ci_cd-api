package storage

import (
	"fmt"

	"github.com/jinzhu/gorm"
)

//SQLStorage is an interface built to represent a relational database accesor
type SQLStorage interface {
	Insert(interface{}) error
	Update(interface{}) error
	Get(interface{}, interface{}) error
	GetBy(interface{}, ...interface{}) error
	Delete(interface{}) error
	DeleteFromRequireStatusChecksByConfigurationID(*string) error
}

//SQLClient is an interface built to represent a *gorm.DB instance generated by GORM
type SQLClient interface {
	Create(value interface{}) *gorm.DB
	Find(out interface{}, where ...interface{}) *gorm.DB
	Save(value interface{}) *gorm.DB
	Delete(value interface{}, where ...interface{}) *gorm.DB
	Set(name string, value interface{}) *gorm.DB
	Close() error
	AutoMigrate(values ...interface{}) *gorm.DB
}

//SQL implements the SQLStorage interface
type SQL struct {
	Client SQLClient
}

//NewMySQL stablish a connection with a mysql database
//Returns an error in case of being imposible to stablish the connection
func NewMySQL() (*SQL, error) {
	//Stablish a database connection
	db, err := gorm.Open("mysql", fmt.Sprintf(
		"%s:%s@tcp(%s)/%s?charset=utf8&parseTime=True&loc=Local",
		configs.GetDBConnectionParams()...,
	))

	//Something was wrong stablishing the database connection
	if err != nil {
		return &SQL{
			Client: db,
		}, err
	}

	//Setting the database logger
	/*
		db.SetLogger(gorm.Logger{
			LogWriter: logger.Log,
		})
	*/
	db.LogMode(true)

	return &SQL{
		Client: db,
	}, nil
}

//Insert create and save an element into the database
func (s *SQL) Insert(e interface{}) error {
	if err := s.Client.Create(e).Error; err != nil {
		return err
	}
	return nil
}

//Get searches an element into the database and returns the found value
func (s *SQL) Get(e interface{}, id interface{}) error {
	if err := s.Client.Set("gorm:auto_preload", true).Find(e, id).Error; err != nil {
		return err
	}
	return nil
}

//GetBy searches an element into the database based on the given query and returns the found values
func (s *SQL) GetBy(e interface{}, qry ...interface{}) error {
	if err := s.Client.Set("gorm:auto_preload", true).Find(e, qry...).Error; err != nil {
		return err
	}
	return nil
}

//Update saves an interface into the database
func (s *SQL) Update(e interface{}) error {
	if err := s.Client.Save(e).Error; err != nil {
		return err
	}
	return nil
}

func (s *SQL) Delete(e interface{}) error {
	if err := s.Client.Delete(e).Error; err != nil {
		return err
	}
	return nil
}

func (s *SQL) DeleteFromRequireStatusChecksByConfigurationID(id *string) error {
	if err := s.Client.Delete(models.RequireStatusCheck{}).Where("configuration_id = ?", id).Error; err != nil {
		return err
	}
	return nil
}
